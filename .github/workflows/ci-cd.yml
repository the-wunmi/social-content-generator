name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: ${{ secrets.APP_NAME }}
  REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev
  REPOSITORY: ${{ secrets.APP_NAME }}-repo

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: social_content_generator_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.18'
        otp-version: '27'
    
    - name: Cache deps
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    
    - name: Cache _build
      uses: actions/cache@v3
      with:
        path: _build
        key: ${{ runner.os }}-build-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-build-
    
    - name: Install dependencies
      run: mix deps.get
    
    - name: Check formatting
      run: mix format --check-formatted
    
    - name: Run tests
      run: mix test
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/social_content_generator_test

  build-and-push:
    # needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write
    
    outputs:
      image-url: ${{ steps.build.outputs.image-url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker $REGISTRY

    - name: Build and push Docker image
      id: build
      run: |
        IMAGE_URL="$REGISTRY/$PROJECT_ID/$REPOSITORY/$SERVICE_NAME:$GITHUB_SHA"
        LATEST_URL="$REGISTRY/$PROJECT_ID/$REPOSITORY/$SERVICE_NAME:latest"
        
        docker build -t $IMAGE_URL -t $LATEST_URL .
        docker push $IMAGE_URL
        docker push $LATEST_URL
        
        echo "image-url=$IMAGE_URL" >> $GITHUB_OUTPUT

  terraform-plan:
    # needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.TERRAFORM_SERVICE_ACCOUNT }}
    
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
    
    - name: Generate terraform.tfvars
      run: |
        cat > terraform/terraform.tfvars << EOF
        project_id = "$PROJECT_ID"
        region = "$REGION"
        app_name = "$SERVICE_NAME"
        app_domain = "${{ secrets.APP_DOMAIN }}"
        database_name = "${{ secrets.DATABASE_NAME }}"
        database_user = "${{ secrets.DATABASE_USER }}"
        database_password = "${{ secrets.DATABASE_PASSWORD }}"
        secret_key_base = "${{ secrets.SECRET_KEY_BASE }}"
        db_tier = "${{ secrets.DB_TIER }}"
        EOF
    
    - name: Terraform Plan
      run: terraform plan -no-color
      working-directory: ./terraform

  terraform-apply:
    # needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.TERRAFORM_SERVICE_ACCOUNT }}
    
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
    
    - name: Generate terraform.tfvars
      run: |
        cat > terraform/terraform.tfvars << EOF
        project_id = "$PROJECT_ID"
        region = "$REGION"
        app_name = "$SERVICE_NAME"
        app_domain = "${{ secrets.APP_DOMAIN }}"
        database_name = "${{ secrets.DATABASE_NAME }}"
        database_user = "${{ secrets.DATABASE_USER }}"
        database_password = "${{ secrets.DATABASE_PASSWORD }}"
        secret_key_base = "${{ secrets.SECRET_KEY_BASE }}"
        db_tier = "${{ secrets.DB_TIER }}"
        EOF
    
    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./terraform

  deploy:
    # needs: [terraform-apply]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Deploy to Cloud Run
      run: |
        # Get database host from Cloud SQL instance
        POSTGRES_HOST=$(gcloud sql instances describe $SERVICE_NAME-db --format="value(ipAddresses[0].ipAddress)")
        
        gcloud run deploy $SERVICE_NAME \
          --image $REGISTRY/$PROJECT_ID/$REPOSITORY/$SERVICE_NAME:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars="MIX_ENV=prod,PHX_HOST=${{ secrets.APP_DOMAIN }},PORT=4000,POSTGRES_HOST=$POSTGRES_HOST,POSTGRES_DB=${{ secrets.DATABASE_NAME }},POSTGRES_USER=${{ secrets.DATABASE_USER }},POSTGRES_PORT=5432" \
          --set-secrets="DATABASE_URL=$SERVICE_NAME-database-url:latest,SECRET_KEY_BASE=$SERVICE_NAME-secret-key-base:latest,OPENAI_API_KEY=$SERVICE_NAME-openai-api-key:latest,OPENAI_BASE_URL=$SERVICE_NAME-openai-base-url:latest,OPENAI_MODEL=$SERVICE_NAME-openai-model:latest,OPENAI_MAX_TOKENS=$SERVICE_NAME-openai-max-tokens:latest,OPENAI_TEMPERATURE=$SERVICE_NAME-openai-temperature:latest,GOOGLE_CLIENT_ID=$SERVICE_NAME-google-client-id:latest,GOOGLE_CLIENT_SECRET=$SERVICE_NAME-google-client-secret:latest,POSTGRES_PASSWORD=$SERVICE_NAME-postgres-password:latest,RECALL_API_KEY=$SERVICE_NAME-recall-api-key:latest" \
          --memory=512Mi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=10

    - name: Run database migrations
      run: |
        # Get database connection details from Secret Manager
        DATABASE_URL=$(gcloud secrets versions access latest --secret="$SERVICE_NAME-database-url")
        
        # Run migrations via Cloud Run job
        gcloud run jobs create migrate-job-$GITHUB_SHA \
          --image=$REGISTRY/$PROJECT_ID/$REPOSITORY/$SERVICE_NAME:$GITHUB_SHA \
          --region=$REGION \
          --set-env-vars="DATABASE_URL=$DATABASE_URL" \
          --command="bin/social_content_generator" \
          --args="eval,SocialContentGenerator.Release.migrate" \
          --max-retries=3 \
          --parallelism=1 \
          --task-count=1 || true
        
        gcloud run jobs execute migrate-job-$GITHUB_SHA --region=$REGION --wait

    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
        echo "Service deployed at: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

    - name: Test deployment
      run: |
        curl -f $SERVICE_URL || exit 1 