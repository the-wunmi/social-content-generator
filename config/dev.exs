import Config

# Configure your database
config :social_content_generator, SocialContentGenerator.Repo,
  username: System.get_env("POSTGRES_USER") || "postgres",
  password: System.get_env("POSTGRES_PASSWORD") || "postgres",
  hostname: System.get_env("POSTGRES_HOST") || "localhost",
  database: System.get_env("POSTGRES_DB") || "social_content_generator_dev",
  port: String.to_integer(System.get_env("POSTGRES_PORT") || "5432"),
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  pool_size: String.to_integer(System.get_env("POSTGRES_POOL_SIZE") || "10")

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :social_content_generator, SocialContentGeneratorWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: String.to_integer(System.get_env("PORT") || "4000")],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base:
    System.get_env("SECRET_KEY_BASE") ||
      "Hu4qQN3iKzTV4fJxhorPQlA/3nDtb9LM/0XhkpClBn4Ue/PEBWBxsa4UaZKAUzLN",
  watchers: [
    esbuild:
      {Esbuild, :install_and_run, [:social_content_generator, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:social_content_generator, ~w(--watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :social_content_generator, SocialContentGeneratorWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/(?!uploads/).*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/social_content_generator_web/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :social_content_generator, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# Include HEEx debug annotations as HTML comments in rendered markup
config :phoenix_live_view, :debug_heex_annotations, true

# Disable swoosh api client as it is only required for production adapters.
config :swoosh, :api_client, false

# Configure Oban for development
config :social_content_generator, Oban, testing: :inline

# OAuth Configuration
config :social_content_generator, :oauth,
  google: [
    client_id: System.get_env("GOOGLE_CLIENT_ID"),
    client_secret: System.get_env("GOOGLE_CLIENT_SECRET"),
    redirect_uri:
      System.get_env("GOOGLE_REDIRECT_URI") || "http://localhost:4000/auth/google/callback"
  ],
  linkedin: [
    client_id: System.get_env("LINKEDIN_CLIENT_ID"),
    client_secret: System.get_env("LINKEDIN_CLIENT_SECRET"),
    redirect_uri:
      System.get_env("LINKEDIN_REDIRECT_URI") || "http://localhost:4000/auth/linkedin/callback"
  ],
  facebook: [
    client_id: System.get_env("FACEBOOK_CLIENT_ID"),
    client_secret: System.get_env("FACEBOOK_CLIENT_SECRET"),
    redirect_uri:
      System.get_env("FACEBOOK_REDIRECT_URI") || "http://localhost:4000/auth/facebook/callback"
  ]

# API Keys for external services
config :social_content_generator, :api_keys,
  recall_api_key: System.get_env("RECALL_API_KEY"),
  openai_api_key: System.get_env("OPENAI_API_KEY")

# Bot configuration
config :social_content_generator, :bot,
  join_offset_minutes: String.to_integer(System.get_env("BOT_JOIN_OFFSET_MINUTES") || "5")

# SMTP Configuration for development
config :social_content_generator, SocialContentGenerator.Mailer,
  adapter: if(System.get_env("SMTP_HOST"), do: Swoosh.Adapters.SMTP, else: Swoosh.Adapters.Local),
  relay: System.get_env("SMTP_HOST"),
  port: String.to_integer(System.get_env("SMTP_PORT") || "587"),
  username: System.get_env("SMTP_USERNAME"),
  password: System.get_env("SMTP_PASSWORD"),
  tls: :if_available,
  retries: 2
