<.header>
  {String.slice(@meeting.calendar_event.title, 0, 50)}{if String.length(
                                                            @meeting.calendar_event.title
                                                          ) > 50,
                                                          do: "...",
                                                          else: ""}
  <:subtitle>Meeting Details</:subtitle>
  <:actions>
    <.link
      navigate={~p"/meetings"}
      class="text-sm font-semibold leading-6 text-zinc-900 hover:text-zinc-700"
    >
      ‚Üê Back to Meetings
    </.link>
  </:actions>
</.header>

<div class="mt-8 space-y-6">
  <!-- Meeting Info -->
  <div class="bg-white shadow rounded-lg p-6">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Meeting Information</h3>
    <dl class="grid grid-cols-1 gap-x-4 gap-y-4 sm:grid-cols-2">
      <div>
        <dt class="text-sm font-medium text-gray-500">Title</dt>
        <dd class="mt-1 text-sm text-gray-900">{@meeting.calendar_event.title}</dd>
      </div>
      <div>
        <dt class="text-sm font-medium text-gray-500">Platform</dt>
        <dd class="mt-1">
          <div :if={@meeting.integration} class="flex items-center">
            <img
              src={@meeting.integration.logo}
              alt={@meeting.integration.name}
              class="w-5 h-5 rounded mr-2"
              onerror="this.style.display='none'"
            />
            <span class="text-sm text-gray-900">{@meeting.integration.name}</span>
          </div>
          <span :if={!@meeting.integration} class="text-sm text-gray-500">Unknown Platform</span>
        </dd>
      </div>
      <div :if={length(@meeting.attendees) > 0}>
        <dt class="text-sm font-medium text-gray-500">
          Attendees ({length(@meeting.attendees)})
        </dt>
        <dd class="mt-1">
          <div class="flex flex-wrap gap-1">
            <span
              :for={attendee <- @meeting.attendees}
              class="inline-flex items-center px-2 py-1 rounded-full text-xs"
              class={
                case attendee.role do
                  "organizer" -> "bg-green-100 text-green-800"
                  _ -> "bg-blue-100 text-blue-800"
                end
              }
            >
              {attendee.name}
            </span>
          </div>
        </dd>
      </div>
      <%!-- TODO log actual meeting start and end time --%>
      <div :if={@meeting.calendar_event.start_time}>
        <dt class="text-sm font-medium text-gray-500">Start Time</dt>
        <dd class="mt-1 text-sm text-gray-900">
          {Calendar.strftime(@meeting.calendar_event.start_time, "%B %d, %Y at %I:%M %p")}
        </dd>
      </div>
      <div :if={@meeting.calendar_event.end_time}>
        <dt class="text-sm font-medium text-gray-500">End Time</dt>
        <dd class="mt-1 text-sm text-gray-900">
          {Calendar.strftime(@meeting.calendar_event.end_time, "%B %d, %Y at %I:%M %p")}
        </dd>
      </div>
      <div :if={@meeting.calendar_event.meeting_url} class="sm:col-span-2">
        <dt class="text-sm font-medium text-gray-500">Meeting URL</dt>
        <dd class="mt-1 text-sm">
          <a
            href={@meeting.calendar_event.meeting_url}
            target="_blank"
            class="text-blue-600 hover:text-blue-800"
          >
            {@meeting.calendar_event.meeting_url}
          </a>
        </dd>
      </div>
      <div :if={@meeting.calendar_event.description} class="sm:col-span-2">
        <dt class="text-sm font-medium text-gray-500">Description</dt>
        <dd class="mt-1 text-sm text-gray-900">{@meeting.calendar_event.description}</dd>
      </div>
    </dl>
  </div>
  
<!-- Transcript Section -->
  <div :if={@meeting.transcript} class="bg-white shadow rounded-lg p-6">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Meeting Transcript</h3>
    <div class="bg-gray-50 rounded-lg p-4 max-h-96 overflow-y-auto">
      <pre class="text-sm text-gray-700 whitespace-pre-wrap">{@meeting.transcript}</pre>
    </div>
  </div>

  <div :if={!@meeting.transcript} class="bg-white shadow rounded-lg p-6">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Meeting Transcript</h3>
    <p class="text-gray-500">
      Transcript not yet available. The meeting may still be in progress or processing.
    </p>
  </div>
  
<!-- Generated Automation Section -->
  <div :if={@meeting.transcript && @automations != []} class="bg-white shadow rounded-lg p-6">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-medium text-gray-900">Generated Automation</h3>
    </div>

    <p class="text-sm text-gray-600 mb-4">
      Generate content using your configured automations. This will create new content based on the meeting transcript.
    </p>

    <div class="grid grid-cols-1 gap-3 sm:grid-cols-2 lg:grid-cols-3 mb-8">
      <div :for={automation <- @automations} class="relative">
        <.link
          href={~p"/meetings/#{@meeting.id}/automations/#{automation.id}/generate"}
          method="post"
          class="block w-full p-4 border border-gray-300 rounded-lg hover:border-blue-500 hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
        >
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center">
                <svg
                  :if={automation.output_type == "social_post"}
                  class="h-5 w-5 text-blue-600"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2m-9 0h10m-10 0a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V6a2 2 0 00-2-2"
                  />
                </svg>
                <svg
                  :if={automation.output_type == "email"}
                  class="h-5 w-5 text-blue-600"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                  />
                </svg>
              </div>
            </div>
            <div class="ml-3 flex-1 min-w-0">
              <p class="text-sm font-medium text-gray-900 truncate">{automation.name}</p>
              <p class="text-xs text-gray-500 capitalize">
                {String.replace(automation.output_type, "_", " ")}
              </p>
              <p :if={automation.integration} class="text-xs text-gray-400">
                {automation.integration.name}
              </p>
            </div>
            <div class="ml-2 flex-shrink-0">
              <svg
                class="h-4 w-4 text-gray-400"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                />
              </svg>
            </div>
          </div>
        </.link>
      </div>
    </div>
    
<!-- Generated Content Within Same Box -->
    <div
      :for={{automation, outputs} <- @automation_outputs_by_automation}
      :if={outputs != []}
      class="mb-8 last:mb-0"
    >
      <h4 class="text-md font-medium text-gray-900 mb-4 border-t pt-6 first:border-t-0 first:pt-0">
        {automation.name}
      </h4>

      <div class="space-y-4">
        <div
          :for={output <- outputs}
          class={
            if automation.output_type == "email",
              do: "border-l-4 border-blue-500 pl-4",
              else: "border rounded-lg p-4"
          }
        >
          <div class="flex justify-between items-start mb-2">
            <div class="flex items-center space-x-2">
              <span
                :if={automation.output_type == "social_post"}
                class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
              >
                {get_platform_name(output)}
              </span>
            </div>
            <span class="text-xs text-gray-500">
              Generated {Calendar.strftime(output.inserted_at, "%B %d, %Y at %I:%M %p")}
            </span>
          </div>

          <div class="bg-gray-50 rounded-lg p-3 mb-3">
                          <div id={"content-display-#{output.id}"}>
                <pre
                  :if={automation.output_type == "email"}
                  id={"content-#{output.id}"}
                  class="text-sm text-gray-700 whitespace-pre-line m-0 p-0"
                >{output.content |> String.trim() |> String.replace(~r/\s+/, " ") |> String.replace(" \n", "\n")}</pre>
                <p
                  :if={automation.output_type == "social_post"}
                  id={"content-#{output.id}"}
                  class="text-sm text-gray-900 whitespace-pre-line m-0 p-0 leading-relaxed"
                >
                  {output.content |> String.trim() |> String.replace(~r/\s+/, " ") |> String.replace(" \n", "\n")}
                </p>
              </div>
            <div id={"content-edit-#{output.id}"} style="display: none;">
              <textarea
                id={"content-textarea-#{output.id}"}
                class="w-full text-sm text-gray-700 border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                rows={if automation.output_type == "email", do: "6", else: "4"}
              >{String.trim(output.content)}</textarea>
            </div>
          </div>

          <div class="flex justify-between items-center">
            <div class="flex space-x-2">
              <button
                onclick={"copyToClipboard('content-#{output.id}')"}
                class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                <svg
                  class="-ml-0.5 mr-2 h-4 w-4"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"
                  />
                </svg>
                Copy
              </button>
              <button
                id={"edit-btn-#{output.id}"}
                onclick={"toggleEdit('#{output.id}')"}
                class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                <svg
                  class="-ml-0.5 mr-2 h-4 w-4"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
                  />
                </svg>
                <span id={"edit-text-#{output.id}"}>Edit</span>
              </button>
              <button
                id={"save-btn-#{output.id}"}
                onclick={"saveContent('#{output.id}', '#{@meeting.id}')"}
                style="display: none;"
                class="inline-flex items-center px-3 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
              >
                <svg
                  class="-ml-0.5 mr-2 h-4 w-4"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M5 13l4 4L19 7"
                  />
                </svg>
                Save
              </button>
              <button
                id={"cancel-btn-#{output.id}"}
                onclick={"cancelEdit('#{output.id}')"}
                style="display: none;"
                class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                Cancel
              </button>
              <.link
                :if={automation.output_type == "social_post" && output.status == "draft"}
                href={~p"/meetings/#{@meeting.id}/automation_outputs/#{output.id}/post"}
                method="post"
                class="inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                <svg
                  class="-ml-0.5 mr-2 h-4 w-4"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"
                  />
                </svg>
                Post to {get_platform_name(output)}
              </.link>
            </div>
            <div :if={automation.output_type == "social_post" && output.status == "posted"}>
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                <svg class="-ml-0.5 mr-1.5 h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                  <path
                    fill-rule="evenodd"
                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                    clip-rule="evenodd"
                  />
                </svg>
                Posted
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
<!-- JavaScript Functions -->
  <script>
    function copyToClipboard(elementId) {
      // Find the content element by ID
      const contentElement = document.getElementById(elementId);
      
      if (!contentElement) {
        alert('Content not found');
        return;
      }
      
      // Get the text content
      const content = contentElement.textContent || contentElement.innerText;
      
      // Copy to clipboard
      navigator.clipboard.writeText(content).then(() => {
        showCopySuccess();
      }).catch(() => {
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = content;
        document.body.appendChild(textArea);
        textArea.select();
        try {
          document.execCommand('copy');
          showCopySuccess();
        } catch (err) {
          alert('Failed to copy to clipboard');
        }
        document.body.removeChild(textArea);
      });
    }

    function showCopySuccess() {
      // Create a temporary success message
      const message = document.createElement('div');
      message.textContent = 'Copied to clipboard!';
      message.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-md shadow-lg z-50';
      document.body.appendChild(message);
      
      setTimeout(() => {
        document.body.removeChild(message);
      }, 2000);
    }

    function toggleEdit(outputId) {
      const displayDiv = document.getElementById(`content-display-${outputId}`);
      const editDiv = document.getElementById(`content-edit-${outputId}`);
      const editBtn = document.getElementById(`edit-btn-${outputId}`);
      const saveBtn = document.getElementById(`save-btn-${outputId}`);
      const cancelBtn = document.getElementById(`cancel-btn-${outputId}`);
      const textarea = document.getElementById(`content-textarea-${outputId}`);
      
      // Toggle display
      displayDiv.style.display = 'none';
      editDiv.style.display = 'block';
      editBtn.style.display = 'none';
      saveBtn.style.display = 'inline-flex';
      cancelBtn.style.display = 'inline-flex';
      
      // Focus on textarea
      textarea.focus();
    }

    function cancelEdit(outputId) {
      const displayDiv = document.getElementById(`content-display-${outputId}`);
      const editDiv = document.getElementById(`content-edit-${outputId}`);
      const editBtn = document.getElementById(`edit-btn-${outputId}`);
      const saveBtn = document.getElementById(`save-btn-${outputId}`);
      const cancelBtn = document.getElementById(`cancel-btn-${outputId}`);
      const textarea = document.getElementById(`content-textarea-${outputId}`);
      const originalContent = document.getElementById(`content-${outputId}`);
      
      // Reset textarea to original content
      textarea.value = originalContent.textContent || originalContent.innerText;
      
      // Toggle display back
      displayDiv.style.display = 'block';
      editDiv.style.display = 'none';
      editBtn.style.display = 'inline-flex';
      saveBtn.style.display = 'none';
      cancelBtn.style.display = 'none';
    }

    function saveContent(outputId, meetingId) {
      const textarea = document.getElementById(`content-textarea-${outputId}`);
      const newContent = textarea.value;
      
      // Show loading state
      const saveBtn = document.getElementById(`save-btn-${outputId}`);
      const originalText = saveBtn.innerHTML;
      saveBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Saving...';
      saveBtn.disabled = true;
      
      // Make API call to update content
      fetch(`/meetings/${meetingId}/automation_outputs/${outputId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({
          automation_output: {
            content: newContent
          }
        })
      })
      .then(response => {
        if (response.ok) {
          // Update the display content
          const contentElement = document.getElementById(`content-${outputId}`);
          if (contentElement.tagName === 'PRE') {
            contentElement.textContent = newContent;
          } else {
            contentElement.textContent = newContent;
          }
          
          // Exit edit mode
          cancelEdit(outputId);
          
          // Show success message
          showSaveSuccess();
        } else {
          throw new Error('Failed to save');
        }
      })
      .catch(error => {
        alert('Failed to save content. Please try again.');
        console.error('Save error:', error);
      })
      .finally(() => {
        // Reset button state
        saveBtn.innerHTML = originalText;
        saveBtn.disabled = false;
      });
    }

    function showSaveSuccess() {
      const message = document.createElement('div');
      message.textContent = 'Content saved successfully!';
      message.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-md shadow-lg z-50';
      document.body.appendChild(message);
      
      setTimeout(() => {
        document.body.removeChild(message);
      }, 2000);
    }
  </script>
</div>
